'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var mlCart = require('ml-cart');
var mlRandomForest = require('ml-random-forest');
var mlPca = require('ml-pca');
var mlHclust = require('ml-hclust');
var mlKmeans = require('ml-kmeans');
var mlNaivebayes = require('ml-naivebayes');
var mlKnn = require('ml-knn');
var mlPls = require('ml-pls');
var mlCrossValidation = require('ml-cross-validation');
var mlConfusionMatrix = require('ml-confusion-matrix');
var mlFnn = require('ml-fnn');
var mlSom = require('ml-som');
var mlRegression = require('ml-regression');
var mlLevenbergMarquardt = require('ml-levenberg-marquardt');
var mlFcnnls = require('ml-fcnnls');
var MatrixLib = require('ml-matrix');
var mlSparseMatrix = require('ml-sparse-matrix');
var mlKernel = require('ml-kernel');
var mlDistance = require('ml-distance');
var mlDistanceMatrix = require('ml-distance-matrix');
var mlXsadd = require('ml-xsadd');
var mlNgmca = require('ml-ngmca');
var mlPerformance = require('ml-performance');
var mlSavitzkyGolay = require('ml-savitzky-golay');
var mlBitArray = require('ml-bit-array');
var mlHashTable = require('ml-hash-table');
var mlPadArray = require('ml-pad-array');
var binarySearch = require('binary-search');
var mlRandom = require('ml-random');
var mlGsd = require('ml-gsd');
var min = require('ml-array-min');
var max = require('ml-array-max');
var median = require('ml-array-median');
var mean = require('ml-array-mean');
var mode = require('ml-array-mode');
var normed = require('ml-array-normed');
var rescale = require('ml-array-rescale');
var sequentialFill = require('ml-array-sequential-fill');
var sum = require('ml-array-sum');
var standardDeviation = require('ml-array-standard-deviation');
var variance = require('ml-array-variance');
var centroidsMerge = require('ml-array-xy-centroids-merge');
var closestX = require('ml-arrayxy-closestx');
var covariance = require('ml-array-xy-covariance');
var maxMerge = require('ml-array-xy-max-merge');
var maxY = require('ml-array-xy-max-y');
var sortX = require('ml-array-xy-sort-x');
var uniqueX = require('ml-arrayxy-uniquex');
var weightedMerge = require('ml-array-xy-weighted-merge');
var equallySpaced = require('ml-array-xy-equally-spaced');
var filterX = require('ml-array-xy-filter-x');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  }
  n['default'] = e;
  return Object.freeze(n);
}

var mlHclust__namespace = /*#__PURE__*/_interopNamespace(mlHclust);
var mlKmeans__default = /*#__PURE__*/_interopDefaultLegacy(mlKmeans);
var mlNaivebayes__namespace = /*#__PURE__*/_interopNamespace(mlNaivebayes);
var mlKnn__default = /*#__PURE__*/_interopDefaultLegacy(mlKnn);
var mlCrossValidation__namespace = /*#__PURE__*/_interopNamespace(mlCrossValidation);
var mlConfusionMatrix__default = /*#__PURE__*/_interopDefaultLegacy(mlConfusionMatrix);
var mlFnn__default = /*#__PURE__*/_interopDefaultLegacy(mlFnn);
var mlSom__default = /*#__PURE__*/_interopDefaultLegacy(mlSom);
var mlLevenbergMarquardt__default = /*#__PURE__*/_interopDefaultLegacy(mlLevenbergMarquardt);
var mlFcnnls__namespace = /*#__PURE__*/_interopNamespace(mlFcnnls);
var MatrixLib__namespace = /*#__PURE__*/_interopNamespace(MatrixLib);
var mlKernel__default = /*#__PURE__*/_interopDefaultLegacy(mlKernel);
var mlDistanceMatrix__default = /*#__PURE__*/_interopDefaultLegacy(mlDistanceMatrix);
var mlXsadd__default = /*#__PURE__*/_interopDefaultLegacy(mlXsadd);
var mlPerformance__default = /*#__PURE__*/_interopDefaultLegacy(mlPerformance);
var mlSavitzkyGolay__default = /*#__PURE__*/_interopDefaultLegacy(mlSavitzkyGolay);
var mlBitArray__default = /*#__PURE__*/_interopDefaultLegacy(mlBitArray);
var mlHashTable__default = /*#__PURE__*/_interopDefaultLegacy(mlHashTable);
var mlPadArray__default = /*#__PURE__*/_interopDefaultLegacy(mlPadArray);
var binarySearch__default = /*#__PURE__*/_interopDefaultLegacy(binarySearch);
var mlRandom__default = /*#__PURE__*/_interopDefaultLegacy(mlRandom);
var mlGsd__namespace = /*#__PURE__*/_interopNamespace(mlGsd);
var min__default = /*#__PURE__*/_interopDefaultLegacy(min);
var max__default = /*#__PURE__*/_interopDefaultLegacy(max);
var median__default = /*#__PURE__*/_interopDefaultLegacy(median);
var mean__default = /*#__PURE__*/_interopDefaultLegacy(mean);
var mode__default = /*#__PURE__*/_interopDefaultLegacy(mode);
var normed__default = /*#__PURE__*/_interopDefaultLegacy(normed);
var rescale__default = /*#__PURE__*/_interopDefaultLegacy(rescale);
var sequentialFill__default = /*#__PURE__*/_interopDefaultLegacy(sequentialFill);
var sum__default = /*#__PURE__*/_interopDefaultLegacy(sum);
var standardDeviation__default = /*#__PURE__*/_interopDefaultLegacy(standardDeviation);
var variance__default = /*#__PURE__*/_interopDefaultLegacy(variance);
var centroidsMerge__default = /*#__PURE__*/_interopDefaultLegacy(centroidsMerge);
var closestX__default = /*#__PURE__*/_interopDefaultLegacy(closestX);
var covariance__default = /*#__PURE__*/_interopDefaultLegacy(covariance);
var maxMerge__default = /*#__PURE__*/_interopDefaultLegacy(maxMerge);
var maxY__default = /*#__PURE__*/_interopDefaultLegacy(maxY);
var sortX__default = /*#__PURE__*/_interopDefaultLegacy(sortX);
var uniqueX__default = /*#__PURE__*/_interopDefaultLegacy(uniqueX);
var weightedMerge__default = /*#__PURE__*/_interopDefaultLegacy(weightedMerge);
var equallySpaced__default = /*#__PURE__*/_interopDefaultLegacy(equallySpaced);
var filterX__default = /*#__PURE__*/_interopDefaultLegacy(filterX);

/* eslint-disable import/newline-after-import */
const {
  Matrix,
  SVD,
  EVD,
  CholeskyDecomposition,
  LuDecomposition,
  QrDecomposition,
} = MatrixLib__namespace;
const Array = {
  min: min__default['default'],
  max: max__default['default'],
  median: median__default['default'],
  mean: mean__default['default'],
  mode: mode__default['default'],
  normed: normed__default['default'],
  rescale: rescale__default['default'],
  sequentialFill: sequentialFill__default['default'],
  standardDeviation: standardDeviation__default['default'],
  sum: sum__default['default'],
  variance: variance__default['default'],
};
const ArrayXY = {
  centroidsMerge: centroidsMerge__default['default'],
  closestX: closestX__default['default'],
  covariance: covariance__default['default'],
  maxMerge: maxMerge__default['default'],
  maxY: maxY__default['default'],
  sortX: sortX__default['default'],
  uniqueX: uniqueX__default['default'],
  weightedMerge: weightedMerge__default['default'],
  equallySpaced: equallySpaced__default['default'],
  filterX: filterX__default['default'],
};

Object.defineProperty(exports, 'DecisionTreeClassifier', {
  enumerable: true,
  get: function () {
    return mlCart.DecisionTreeClassifier;
  }
});
Object.defineProperty(exports, 'DecisionTreeRegression', {
  enumerable: true,
  get: function () {
    return mlCart.DecisionTreeRegression;
  }
});
Object.defineProperty(exports, 'RandomForestClassifier', {
  enumerable: true,
  get: function () {
    return mlRandomForest.RandomForestClassifier;
  }
});
Object.defineProperty(exports, 'RandomForestRegression', {
  enumerable: true,
  get: function () {
    return mlRandomForest.RandomForestRegression;
  }
});
Object.defineProperty(exports, 'PCA', {
  enumerable: true,
  get: function () {
    return mlPca.PCA;
  }
});
exports.HClust = mlHclust__namespace;
Object.defineProperty(exports, 'KMeans', {
  enumerable: true,
  get: function () {
    return mlKmeans__default['default'];
  }
});
exports.NaiveBayes = mlNaivebayes__namespace;
Object.defineProperty(exports, 'KNN', {
  enumerable: true,
  get: function () {
    return mlKnn__default['default'];
  }
});
Object.defineProperty(exports, 'KOPLS', {
  enumerable: true,
  get: function () {
    return mlPls.KOPLS;
  }
});
Object.defineProperty(exports, 'OPLS', {
  enumerable: true,
  get: function () {
    return mlPls.OPLS;
  }
});
Object.defineProperty(exports, 'OPLSNipals', {
  enumerable: true,
  get: function () {
    return mlPls.OPLSNipals;
  }
});
Object.defineProperty(exports, 'PLS', {
  enumerable: true,
  get: function () {
    return mlPls.PLS;
  }
});
exports.CrossValidation = mlCrossValidation__namespace;
Object.defineProperty(exports, 'ConfusionMatrix', {
  enumerable: true,
  get: function () {
    return mlConfusionMatrix__default['default'];
  }
});
Object.defineProperty(exports, 'FNN', {
  enumerable: true,
  get: function () {
    return mlFnn__default['default'];
  }
});
Object.defineProperty(exports, 'SOM', {
  enumerable: true,
  get: function () {
    return mlSom__default['default'];
  }
});
Object.defineProperty(exports, 'ExponentialRegression', {
  enumerable: true,
  get: function () {
    return mlRegression.ExponentialRegression;
  }
});
Object.defineProperty(exports, 'MultivariateLinearRegression', {
  enumerable: true,
  get: function () {
    return mlRegression.MultivariateLinearRegression;
  }
});
Object.defineProperty(exports, 'PolynomialRegression', {
  enumerable: true,
  get: function () {
    return mlRegression.PolynomialRegression;
  }
});
Object.defineProperty(exports, 'PowerRegression', {
  enumerable: true,
  get: function () {
    return mlRegression.PowerRegression;
  }
});
Object.defineProperty(exports, 'RobustPolynomialRegression', {
  enumerable: true,
  get: function () {
    return mlRegression.RobustPolynomialRegression;
  }
});
Object.defineProperty(exports, 'SimpleLinearRegression', {
  enumerable: true,
  get: function () {
    return mlRegression.SimpleLinearRegression;
  }
});
Object.defineProperty(exports, 'TheilSenRegression', {
  enumerable: true,
  get: function () {
    return mlRegression.TheilSenRegression;
  }
});
Object.defineProperty(exports, 'levenbergMarquardt', {
  enumerable: true,
  get: function () {
    return mlLevenbergMarquardt__default['default'];
  }
});
exports.FCNNLS = mlFcnnls__namespace;
exports.MatrixLib = MatrixLib__namespace;
Object.defineProperty(exports, 'SparseMatrix', {
  enumerable: true,
  get: function () {
    return mlSparseMatrix.SparseMatrix;
  }
});
Object.defineProperty(exports, 'Kernel', {
  enumerable: true,
  get: function () {
    return mlKernel__default['default'];
  }
});
Object.defineProperty(exports, 'Distance', {
  enumerable: true,
  get: function () {
    return mlDistance.distance;
  }
});
Object.defineProperty(exports, 'Similarity', {
  enumerable: true,
  get: function () {
    return mlDistance.similarity;
  }
});
Object.defineProperty(exports, 'distanceMatrix', {
  enumerable: true,
  get: function () {
    return mlDistanceMatrix__default['default'];
  }
});
Object.defineProperty(exports, 'XSadd', {
  enumerable: true,
  get: function () {
    return mlXsadd__default['default'];
  }
});
Object.defineProperty(exports, 'nGMCA', {
  enumerable: true,
  get: function () {
    return mlNgmca.nGMCA;
  }
});
Object.defineProperty(exports, 'Performance', {
  enumerable: true,
  get: function () {
    return mlPerformance__default['default'];
  }
});
Object.defineProperty(exports, 'savitzkyGolay', {
  enumerable: true,
  get: function () {
    return mlSavitzkyGolay__default['default'];
  }
});
Object.defineProperty(exports, 'BitArray', {
  enumerable: true,
  get: function () {
    return mlBitArray__default['default'];
  }
});
Object.defineProperty(exports, 'HashTable', {
  enumerable: true,
  get: function () {
    return mlHashTable__default['default'];
  }
});
Object.defineProperty(exports, 'padArray', {
  enumerable: true,
  get: function () {
    return mlPadArray__default['default'];
  }
});
Object.defineProperty(exports, 'binarySearch', {
  enumerable: true,
  get: function () {
    return binarySearch__default['default'];
  }
});
Object.defineProperty(exports, 'Random', {
  enumerable: true,
  get: function () {
    return mlRandom__default['default'];
  }
});
exports.GSD = mlGsd__namespace;
exports.Array = Array;
exports.ArrayXY = ArrayXY;
exports.CholeskyDecomposition = CholeskyDecomposition;
exports.EVD = EVD;
exports.LuDecomposition = LuDecomposition;
exports.Matrix = Matrix;
exports.QrDecomposition = QrDecomposition;
exports.SVD = SVD;
