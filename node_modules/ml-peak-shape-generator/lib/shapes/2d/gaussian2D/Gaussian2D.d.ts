import { Shape2D } from '../Shape2D';
export interface XYNumber {
    x: number;
    y: number;
}
export { widthToFWHM, fwhmToWidth } from '../../1d/gaussian/Gaussian';
export interface Gaussian2DClassOptions {
    /**
     * The maximum z value of the shape
     */
    height?: number;
    /**
     * Full width at half maximum.
     * Could specify the value for each axis by a xy object or both by a number.
     * @default 50
     */
    fwhm?: number | XYNumber;
    /**
     * The halft width between the inflection points or standard deviation.
     * If it is defined the fwhm would be re-assigned.
     */
    sd?: number | XYNumber;
}
export interface GetDataOptions extends Gaussian2DClassOptions {
    /**
     * number of points along an specific axis.
     * Could specify the value for each axis by a xy object or the same value by a number
     * @default 'fwhm[axis] * factor[axis]'
     */
    length?: number | XYNumber;
    /**
     * Number of time to take fwhm to calculate length.
     * @default 'covers 99.99 % of volume'
     */
    factor?: number | XYNumber;
}
export interface GetVolumeOptions {
    /**
     * The maximum intensity value of the shape
     * @default 1
     */
    height?: number;
    /**
     * Full width at half maximum.
     * Could specify the value for each axis by a xy object or both by a number.
     */
    fwhm?: number | XYNumber;
}
export declare class Gaussian2D extends Shape2D {
    /**
     * Full width at half maximum.
     * Could specify the value for each axis by a xy object or both by a number.
     * @default 50
     */
    fwhmX: number;
    fwhmY: number;
    /**
     * The maximum z value of the shape, default keep surface equal 1.
     */
    height: number;
    constructor(options?: Gaussian2DClassOptions);
    fct(x: number, y: number): number;
    getData(options?: GetDataOptions): any[];
    getFactor(surface: number): number;
    getSurface(): number;
    widthToFWHM(width: number): number;
    fwhmToWidth(fwhm: number): number;
    set fwhm(fwhm: number | XYNumber);
}
/**
 * Return a parameterized function of a Gaussian2D shape (see README for equation).
 * @param x - x value to calculate.
 * @param y - y value to calculate.
 * @param fwhmX - full width half maximum in the x axis.
 * @param fwhmY - full width half maximum in the y axis.
 * @returns - the z value of bi-dimensional gaussian with the current parameters.
 */
export declare function fct(x: number, y: number, xFWHM: number, yFWHM: number): number;
/**
 * Calculate the intensity matrix of a gaussian shape.
 * @returns z values.
 */
export declare function getData(options?: GetDataOptions): any[];
/**
 * Calculate the number of times FWHM allows to reach a specific surface coverage.
 * @param [surface=0.9999] Expected volume to be covered.
 * @returns
 */
export declare function getFactor(surface?: number): number;
/**
 * Calculate the surface of gaussian shape.
 * @returns The surface of the specific shape and parameters.
 */
export declare function getSurface(options?: GetVolumeOptions): number;
