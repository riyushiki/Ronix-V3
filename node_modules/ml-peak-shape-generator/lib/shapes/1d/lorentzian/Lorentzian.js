"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getData = exports.getFactor = exports.getArea = exports.fwhmToWidth = exports.widthToFWHM = exports.fct = exports.Lorentzian = void 0;
const constants_1 = require("../../../util/constants");
const Shape1D_1 = require("../Shape1D");
class Lorentzian extends Shape1D_1.Shape1D {
    constructor(options = {}) {
        super();
        const { fwhm = 500, height } = options;
        this.fwhm = fwhm;
        this.height = height === undefined ? 2 / Math.PI / fwhm : height;
    }
    fwhmToWidth(fwhm = this.fwhm) {
        return fwhmToWidth(fwhm);
    }
    widthToFWHM(width) {
        return widthToFWHM(width);
    }
    fct(x) {
        return fct(x, this.fwhm);
    }
    getArea() {
        return getArea({ fwhm: this.fwhm, height: this.height });
    }
    getFactor(area) {
        return getFactor(area);
    }
    getData(options = {}) {
        const { length, factor } = options;
        return getData({ fwhm: this.fwhm, height: this.height, factor, length });
    }
}
exports.Lorentzian = Lorentzian;
/**
 * Return a parameterized function of a lorentzian shape (see README for equation).
 * @param x - x value to calculate.
 * @param fwhm - full width half maximum
 * @returns - the y value of lorentzian with the current parameters.
 */
function fct(x, fwhm) {
    return Math.pow(fwhm, 2) / (4 * Math.pow(x, 2) + Math.pow(fwhm, 2));
}
exports.fct = fct;
/**
 * Compute the value of Full Width at Half Maximum (FWHM) from the width between the inflection points.
 * for more information check the [mathworld page](https://mathworld.wolfram.com/LorentzianFunction.html)
 * @param width - Width between the inflection points
 * @returns fwhm
 */
function widthToFWHM(width) {
    return width * constants_1.ROOT_THREE;
}
exports.widthToFWHM = widthToFWHM;
/**
 * Compute the value of width between the inflection points from Full Width at Half Maximum (FWHM).
 * for more information check the [mathworld page](https://mathworld.wolfram.com/LorentzianFunction.html)
 * @param fwhm - Full Width at Half Maximum.
 * @returns width
 */
function fwhmToWidth(fwhm) {
    return fwhm / constants_1.ROOT_THREE;
}
exports.fwhmToWidth = fwhmToWidth;
/**
 * Calculate the area of a specific shape.
 * @returns returns the area of the specific shape and parameters.
 */
function getArea(options) {
    const { fwhm, height = 1 } = options;
    if (fwhm === undefined) {
        throw new Error('should pass fwhm or sd parameters');
    }
    return (height * Math.PI * fwhm) / 2;
}
exports.getArea = getArea;
/**
 * Calculate the number of times FWHM allows to reach a specific area coverage.
 * @param [area=0.9999] Expected area to be covered.
 * @returns
 */
function getFactor(area = 0.9999) {
    return 2 * Math.tan(Math.PI * (area - 0.5));
}
exports.getFactor = getFactor;
/**
 * Calculate intensity array of a lorentzian shape.
 * @returns {Float64Array} y values
 */
function getData(options = {}) {
    let { length, factor = getFactor(), fwhm = 500, height } = options;
    if (!height) {
        height = 2 / Math.PI / fwhm;
    }
    if (!length) {
        length = Math.min(Math.ceil(fwhm * factor), Math.pow(2, 25) - 1);
        if (length % 2 === 0)
            length++;
    }
    const center = (length - 1) / 2;
    const data = new Float64Array(length);
    for (let i = 0; i <= center; i++) {
        data[i] = fct(i - center, fwhm) * height;
        data[length - 1 - i] = data[i];
    }
    return data;
}
exports.getData = getData;
//# sourceMappingURL=Lorentzian.js.map